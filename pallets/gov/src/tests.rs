use crate::{mock::*, Error, Event, RawEvent, mock};
use frame_support::{assert_noop, assert_ok};
use sp_core::{
    H256,
};
use std::convert::TryInto;

pub fn str_to_hash(hash_str: &str) -> Option<[u8; 32]> {
    if hash_str.len() == 66 && &hash_str[0..2] == "0x" {
        if let Ok(bytes) = hex::decode(&hash_str[2..66]) {
            if let Ok(eth_hash) = bytes.try_into() {
                return Some(eth_hash);
            }
        }
    }
    return None;
}

#[test]
fn stores_storage_root() {
	new_test_ext().execute_with(|| {
        let block_number: u64 = 13084960;
        let storage_root_bytes: [u8; 32] = str_to_hash("0x80c9a98e6d091d9870fa6e26f5d935dd6174a4564600e929011f682a825aa5b8").unwrap();
        let storage_root: H256 = H256(storage_root_bytes);
		// Dispatch a signed extrinsic to store storage root.
		assert_ok!(GovModule::store_storage_root(Origin::signed(1), block_number, storage_root));
		// Read pallet storage and assert an expected result.
		assert_eq!(GovModule::storage_root(block_number), storage_root);

       // Check that the correct event is emitted
       let expected_event = mock::Event::pallet_gov(RawEvent::StorageRootStored(block_number, storage_root));
       assert_eq!(System::events()[0].event, expected_event,);

        println!("{}", GovModule::storage_root(block_number));
	});
}

#[test]
fn verifies_proof_with_odd_leaf_node() {
	new_test_ext().execute_with(|| {
        println!("LOG: starting test");
        let block_number: u64 = 13084960;
        let storage_root_bytes: [u8; 32] = str_to_hash("0x80c9a98e6d091d9870fa6e26f5d935dd6174a4564600e929011f682a825aa5b8").unwrap();
        let storage_root: H256 = H256(storage_root_bytes);
		// Store storage root.
		assert_ok!(GovModule::store_storage_root(Origin::signed(1), block_number, storage_root));

        // Define proofs.
        let key = hex::decode("ea0d43baabaa35779c32a65010508497328024f66e5d6d3246da6d5f1196e017").unwrap();
        let value = hex::decode("029ade03ae443c0cf00000").unwrap();
        let proof = vec![
            hex::decode("f90211a0a5177e86acbc4cf377a71bb1eefc5a6fbc291bdaa24a1329fc0a7d8b1d1c1b6ea04617a3e6d77a766bf9765ea99f6551a608da5a3a92b6d3d4d77cd72c2956a691a089378dc01a14c46f4bc70b18f4f89ed999f662b10321be19f17f8a28f3ed628aa032b7aa9f61401e9dfa443173d009991ef1b11695b833b791ba955e2d201582a2a078a52bd9e3780cefaa22782c1d848d58f0c44e840be1aced5b27274e04532d44a07cc1d0bd92bf8787c419ee93c46b3081e9c327e67ca40efa12fc3340b6a57af3a0d0ed8ccb13e91933017f33bc981aa39203fdd13691c8c10ea4e1c7235b9828caa0c9aff81ec497dce19b1e11a4558b8029377bbc132ecfa78bc9f031d3b95d59c5a060258dfe689213ea4448a9a499fbad3000f28f9521a939bc1fb385b0eae28eaaa039fe2ef2f84b3e2b7c084352f2e525710232f715cdbf7a71ee17daa888e69770a0c6816a145bdb69b9e437cef45a5b8f9035b8dc53c8d9e477bd498c8f0efd21eca0c97e9000139384fde0b8c590c46e0525b73e9521dc4427fd2b47750a61dded9aa0d37b0cfb7bc7b900a79dee2d5f01e3c3fd2d788446bdccc44d44d76008c6f201a00423f3cfca18f91a52c67c6c69046fd74dadb9cf7715bfeb03ce4184d714b302a0dfa0947ef843dacb9518cbffd5d53271a3213043d88013e52620caea84123ddba054f8d0d47af761aefdce4ac8da11325d2d41fb068dc791e355933a3cac60212f80").unwrap(),
            hex::decode("f90211a01333e6382d6c303e89efd56c58d6523e41cf5b1c5f793e9969907c6772d9ae10a0afc343d852a18b7422656be334a9e3722c06a8277ef7f2c3cae86debbf3409a3a095028816b3e724ee9639c84be71d53c1898f4c81561e55e108e63abaeb3ed737a0deba0cac9c82e14f7dc90e93a1304a819cb2a304d1425da719cfb8166c31c5d0a01b1846ed768d89ceac9308c858464e78643993eeff75b9bec7e69574b1365599a0eb29499beada326c068de2109b7e463bd66490563816fe61e6d756ad83c59ec3a0bbf1eb6861321dabfb10c6ac7815cb4b33024fc9600aaaa5baf2a90944e116f1a051c65b8a9ddf67f6258d9b5988211073d6bb88848398b35901d5dbc3620da72ea00e283db6762c7e4099d1263adaebbfaedbb774e78986730c9fd9234210edfd43a0f4a9080cb4c33f75ab48b6cd58d4c0e377f457e0d56554f751d1ff5c3601cfeda09e1735497f07982c62f9a0aaf9e3202b3dad70bca9a371b0019dc99ebc7ef142a04a4c289e7c414dc4d4480efb87310600a582f33db748545b1045a09edb731c5aa09b99c3ad4c76428956477af2ecf7433ad2450bcf6e60ca793c16f66267ec41c5a03279d8fa4088ae2835d1128869efde4fac55b3f7f74b068ec244dbf99e6420bda098f20887e26eff360071b46b608f7d693bb4a8eca3f734cfae84e8a88977bec0a0e16218d34192fa20fbece5799730cdf6c0870c17bf946f7c413743e05852cf8980").unwrap(),
            hex::decode("f90211a0ac98c7316786c6533a57c8b79d460d196e21c9ea02454e70e1ccfde69965d7e3a00fe68c4d7055ba645b3d94966caf7f9c4566521b518cd4886e1b270d69dc09e0a001c22697980e8a2963dbc75d3d41fe599ee2ab59742b431547742ae7e3d72277a02e83b3c4cd7e541029235e73931a25aa96a9bcd5ee1dfc492d4167c2956b43f2a0d5c2d0732b5d73b7bdb0d253df3b7d16d22795c41ab0c12ef80b99f077f59d2ea02bb969bda9b3ff90cb5cd3dccfeb65c10796886f8d68aaafcc30a3f8b48a9769a0c93c2804966ede5ea560d9c14044d2224fda91d91884e296bfcc6e70f5b0283ea0ca9427e11890a4f01f5900305de7abe2e124f33d4db9468bb1b09621c7d755eea04fc1da0ce4f6a2a9a8b26c386011549d4f2f1b5d2ee45c049578fb1f34f6e9b0a0e4bd6053812407401a3f231e75059e0a639d73f7acdb7d3d1f51bcdcff5df140a066de3c171230a68b2b3b1355ee7e57054ebdd7208f5b6b4d3fecc89bcc78bc50a04a4304e1d8fc660c6901a9d40de4ac11b4b8eb1244349aa1344dd8f6c0cd9a8fa0c526cc5c77a725e726d1336ae57e0e9dafc55dfba1a5ba04edf9bc6bdf1b678aa07cfd650999781b5aa61b7def4734708bff88a39c427480a8cc977ff128eab694a0c5489fd491915a661eefbe2ca9908a1190e5ab82907cb60ba3f4a13f5fc1638ba0c47ab01dc431fd9e6cd1544e7dc7582eed2c6fba1fe8699736c43b5075865b6b80").unwrap(),
            hex::decode("f901f1a0f69ccfc218fb33dbc09241b3fb73d7618abd73eedfe0d0c27ec38194cc49f155a0a02657b99dbd54f6a7822ffaea4ba4639c46280c5f1fc1c2dec99fae4fa5c812a056da2d7e78f685e285d6bef4c16c96f3386d4edd8cf4daf3265134e34ae38e99a037c19426b7a66c5c6243c4ca4ba6fec137b33397e12bf077a6989deb28e6723fa0f95de4d700c36c59c35533d8d45342bea2db6f260c64bba1753812d548bc2b1ca086b4b33ce01faa10a245e4fea3b44b9d7144995f4f56349c7e98253281b6c3d6a03e4dc6648e42d122098a9ee9d9c46e900307c0c2ac7f1c741dd25e6b384bcb8ba0ca505ef73025919758cc4757c4f93d99cee37765b8a3d1c0b7028e76e0c5d9d3a025688a7ccdddfc40229945106bed07696a7882f4e1376e25f09a8061c3ded292a01eeb996259136a38e6b5eed77096c1a32372380bbf27e1b3d2177c64807c56eca08883d51217a7484c4d0673e501cc9da2046918842b26b3ef6bb0701fc2ca53b8a0a87ef4ccc71e14c850b1fd40cb5385bf939e24f02b97ad70d930347f46ed1dfca038ec805afcaffb37cc18ad86497172421f5dec53630fc3a5be68cb3e6d5df12b80a0e310547f945c43c56a886a8ae5ed81f5a456dd3282a5bfb4c5449ac279f0d54ca09726c103c0a37fa3e6838fed6697b711957028896b0736dd80fb178dcd69bed380").unwrap(),
            hex::decode("f8918080a0929cda5a139acd2d8ecb7f4bb82df6e44e7d809942017179b276cee8467f0a0680a0a08c3ce65d23544d70d19893b1b6e1308e570d3a2be2a7d23aa4fe90a4dfd0cc8080a0117d1d285a0c40e29efb210f3cbc08f87e11094f91b0b85545a6dddd1a1ecd7e808080808080a0f553c1cecdbcad6265d17a07e7a00dc05af7e6b08857d773dc92342340b81b928080").unwrap(),
            hex::decode("ec9e3b6e082fdebda47dc55282be5e6b0140a1580b3341ea097f15c13ea588728c8b029ade03ae443c0cf00000").unwrap()
        ];

        assert_ok!(GovModule::verify_proof(Origin::signed(1), block_number, proof, key, value));

        // Check that the correct event is emitted
		let expected_event = mock::Event::pallet_gov(RawEvent::VerifyProof(true));
		assert_eq!(System::events()[1].event, expected_event,);

        println!("{}", GovModule::storage_root(block_number));
	});
}

// TODO: This fails and causes panic
#[test]
fn invalidates_proof_with_odd_leaf_node() {
	new_test_ext().execute_with(|| {
        println!("LOG: starting test");
        let block_number: u64 = 13084960;
        let storage_root_bytes: [u8; 32] = str_to_hash("0x80c9a98e6d091d9870fa6e26f5d935dd6174a4564600e929011f682a825aa5b8").unwrap();
        let storage_root: H256 = H256(storage_root_bytes);
		// Store storage root.
		assert_ok!(GovModule::store_storage_root(Origin::signed(1), block_number, storage_root));

        // Define proofs.
        let key = hex::decode("ea0d43baabaa35779c32a65010508497328024f66e5d6d3246da6d5f1196e017").unwrap();
        let value = hex::decode("029ade03ae443c0cf00000").unwrap();
        let proof = vec![
            hex::decode("f90211a0a5177e86acbc4cf377a71bb1eefc5a6fbc291bdaa24a1329fc0a7d8b1d1c1b6ea04617a3e6d77a766bf9765ea99f6551a608da5a3a92b6d3d4d77cd72c2956a691a089378dc01a14c46f4bc70b18f4f89ed999f662b10321be19f17f8a28f3ed628aa032b7aa9f61401e9dfa443173d009991ef1b11695b833b791ba955e2d201582a2a078a52bd9e3780cefaa22782c1d848d58f0c44e840be1aced5b27274e04532d44a07cc1d0bd92bf8787c419ee93c46b3081e9c327e67ca40efa12fc3340b6a57af3a0d0ed8ccb13e91933017f33bc981aa39203fdd13691c8c10ea4e1c7235b9828caa0c9aff81ec497dce19b1e11a4558b8029377bbc132ecfa78bc9f031d3b95d59c5a060258dfe689213ea4448a9a499fbad3000f28f9521a939bc1fb385b0eae28eaaa039fe2ef2f84b3e2b7c084352f2e525710232f715cdbf7a71ee17daa888e69770a0c6816a145bdb69b9e437cef45a5b8f9035b8dc53c8d9e477bd498c8f0efd21eca0c97e9000139384fde0b8c590c46e0525b73e9521dc4427fd2b47750a61dded9aa0d37b0cfb7bc7b900a79dee2d5f01e3c3fd2d788446bdccc44d44d76008c6f201a00423f3cfca18f91a52c67c6c69046fd74dadb9cf7715bfeb03ce4184d714b302a0dfa0947ef843dacb9518cbffd5d53271a3213043d88013e52620caea84123ddba054f8d0d47af761aefdce4ac8da11325d2d41fb068dc791e355933a3cac60212f80").unwrap(),
            hex::decode("f90211a01333e6382d6c303e89efd56c58d6523e41cf5b1c5f793e9969907c6772d9ae10a0afc343d852a18b7422656be334a9e3722c06a8277ef7f2c3cae86debbf3409a3a095028816b3e724ee9639c84be71d53c1898f4c81561e55e108e63abaeb3ed737a0deba0cac9c82e14f7dc90e93a1304a819cb2a304d1425da719cfb8166c31c5d0a01b1846ed768d89ceac9308c858464e78643993eeff75b9bec7e69574b1365599a0eb29499beada326c068de2109b7e463bd66490563816fe61e6d756ad83c59ec3a0bbf1eb6861321dabfb10c6ac7815cb4b33024fc9600aaaa5baf2a90944e116f1a051c65b8a9ddf67f6258d9b5988211073d6bb88848398b35901d5dbc3620da72ea00e283db6762c7e4099d1263adaebbfaedbb774e78986730c9fd9234210edfd43a0f4a9080cb4c33f75ab48b6cd58d4c0e377f457e0d56554f751d1ff5c3601cfeda09e1735497f07982c62f9a0aaf9e3202b3dad70bca9a371b0019dc99ebc7ef142a04a4c289e7c414dc4d4480efb87310600a582f33db748545b1045a09edb731c5aa09b99c3ad4c76428956477af2ecf7433ad2450bcf6e60ca793c16f66267ec41c5a03279d8fa4088ae2835d1128869efde4fac55b3f7f74b068ec244dbf99e6420bda098f20887e26eff360071b46b608f7d693bb4a8eca3f734cfae84e8a88977bec0a0e16218d34192fa20fbece5799730cdf6c0870c17bf946f7c413743e05852cf8980").unwrap(),
            hex::decode("f90211a0ac98c7316786c6533a57c8b79d460d196e21c9ea02454e70e1ccfde69965d7e3a00fe68c4d7055ba645b3d94966caf7f9c4566521b518cd4886e1b270d69dc09e0a001c22697980e8a2963dbc75d3d41fe599ee2ab59742b431547742ae7e3d72277a02e83b3c4cd7e541029235e73931a25aa96a9bcd5ee1dfc492d4167c2956b43f2a0d5c2d0732b5d73b7bdb0d253df3b7d16d22795c41ab0c12ef80b99f077f59d2ea02bb969bda9b3ff90cb5cd3dccfeb65c10796886f8d68aaafcc30a3f8b48a9769a0c93c2804966ede5ea560d9c14044d2224fda91d91884e296bfcc6e70f5b0283ea0ca9427e11890a4f01f5900305de7abe2e124f33d4db9468bb1b09621c7d755eea04fc1da0ce4f6a2a9a8b26c386011549d4f2f1b5d2ee45c049578fb1f34f6e9b0a0e4bd6053812407401a3f231e75059e0a639d73f7acdb7d3d1f51bcdcff5df140a066de3c171230a68b2b3b1355ee7e57054ebdd7208f5b6b4d3fecc89bcc78bc50a04a4304e1d8fc660c6901a9d40de4ac11b4b8eb1244349aa1344dd8f6c0cd9a8fa0c526cc5c77a725e726d1336ae57e0e9dafc55dfba1a5ba04edf9bc6bdf1b678aa07cfd650999781b5aa61b7def4734708bff88a39c427480a8cc977ff128eab694a0c5489fd491915a661eefbe2ca9908a1190e5ab82907cb60ba3f4a13f5fc1638ba0c47ab01dc431fd9e6cd1544e7dc7582eed2c6fba1fe8699736c43b5075865b6b80").unwrap(),
            hex::decode("f901f1a0f69ccfc218fb33dbc09241b3fb73d7618abd73eedfe0d0c27ec38194cc49f155a0a02657b99dbd54f6a7822ffaea4ba4639c46280c5f1fc1c2dec99fae4fa5c812a056da2d7e78f685e285d6bef4c16c96f3386d4edd8cf4daf3265134e34ae38e99a037c19426b7a66c5c6243c4ca4ba6fec137b33397e12bf077a6989deb28e6723fa0f95de4d700c36c59c35533d8d45342bea2db6f260c64bba1753812d548bc2b1ca086b4b33ce01faa10a245e4fea3b44b9d7144995f4f56349c7e98253281b6c3d6a03e4dc6648e42d122098a9ee9d9c46e900307c0c2ac7f1c741dd25e6b384bcb8ba0ca505ef73025919758cc4757c4f93d99cee37765b8a3d1c0b7028e76e0c5d9d3a025688a7ccdddfc40229945106bed07696a7882f4e1376e25f09a8061c3ded292a01eeb996259136a38e6b5eed77096c1a32372380bbf27e1b3d2177c64807c56eca08883d51217a7484c4d0673e501cc9da2046918842b26b3ef6bb0701fc2ca53b8a0a87ef4ccc71e14c850b1fd40cb5385bf939e24f02b97ad70d930347f46ed1dfca038ec805afcaffb37cc18ad86497172421f5dec53630fc3a5be68cb3e6d5df12b80a0e310547f945c43c56a886a8ae5ed81f5a456dd3282a5bfb4c5449ac279f0d54ca09726c103c0a37fa3e6838fed6697b711957028896b0736dd80fb178dcd69bed380").unwrap(),
            hex::decode("f8918080a0929cda5a139acd2d8ecb7f4bb82df6e44e7d809942017179b276cee8467f0a0680a0a08c3ce65d23544d70d19893b1b6e1308e570d3a2be2a7d23aa4fe90a4dfd0cc8080a0117d1d285a0c40e29efb210f3cbc08f87e11094f91b0b85545a6dddd1a1ecd7e808080808080a0f553c1cecdbcad6265d17a07e7a00dc05af7e6b08857d773dc92342340b81b928080").unwrap(),
            // Last hexchar changed from 0 to 3
            hex::decode("ec9e3b6e082fdebda47dc55282be5e6b0140a1580b3341ea097f15c13ea588728c8b029ade03ae443c0cf00003").unwrap()
        ];

        assert_ok!(GovModule::verify_proof(Origin::signed(1), block_number, proof, key, value));

        // Check that the correct event is emitted
		let expected_event = mock::Event::pallet_gov(RawEvent::VerifyProof(true));
		assert_eq!(System::events()[1].event, expected_event,);

        println!("{}", GovModule::storage_root(block_number));
	});
}

#[test]
fn verifies_proof_with_even_leaf_node() {
	new_test_ext().execute_with(|| {
        println!("LOG: starting test");
        let block_number: u64 = 13096010;
        let storage_root_bytes: [u8; 32] = str_to_hash("0x4931119b41f0d0047162d6ceb4bd6f73e8932c5ad7360d39d6febd033ecc1ac7").unwrap();
        let storage_root: H256 = H256(storage_root_bytes);
		// Store storage root.
		assert_ok!(GovModule::store_storage_root(Origin::signed(1), block_number, storage_root));

        // Define proofs.
        let key = hex::decode("9b4ccb6f3f5a675c4a585294f5d37a4345ced1f2eae2c26627625fca2715f743").unwrap();
        let value = hex::decode("02af").unwrap();
        let proof = vec![
            hex::decode("f90211a03b745000fb00ca23183789333a8272472c550764ab595787c6524a473811ed7ba0c41b7c80e09609692f498d0d61817cecb0dc4c19f0c0f29cbdced4d8aa87314da0f14c3b8aa9307f5ca4aa9c96dc9697917b28eac104edf9796bfc9d2e65fe05a9a0fa809a837076e00584fb36feeaf58b2d886dd8e4fe25291a191e5d62e685a5c6a0fe9ef95e7371c703873eea9577631225ed77abdc601e7dbc6ec143c108bd16bfa0a5d4941a3995f9d9d7b692a501500705bc4f97ae1f981be523369aafd9e0781ca0605a8ae9187e651b107f25ffadafac0f802b0a33794bf1d9b5355500f765d007a0ac72d7acd420411450e9fc9a4255c9b97664bb0dff4fbd5d17b7493f367d7c27a0ae86115d2efc61ca5a5536a72d1f4378a596a4e4c55ca5766473585ed664cc58a0c601b7d02f0b8446b4e4312095f6e0f302ef5210f7b71c4801d7c512fed05577a01cca3ac353b215c11a1bb7022695035cfce1b1e23c5053e224e51aab674cf886a05677ee57f30bd4b15708f3a32e65cb1b11b68bb9fa124a5519f04c88b3cd6ce4a0c2b6a7d6d173ddd9107c0be214774fe02553b54be6e05641e5dab9bfed13d7eba0a92621772dde318c6aa779bc6a27baeeb99a745fbd8901cf31d5f782d51e2bb6a066a2f0510b2abd6dadeee4687cfdb09ebbfc990ac006224e6de77073da2e13d9a021940abac39faa3ec0da80c5ffacc74508a079a75a5c79e8eb88d0062f30a66d80").unwrap(),
            hex::decode("f90211a08fa78e68433171906c18d7ca777d262f5302a6fbafc5f641a7f2de37b7e2d1c8a0c90a38798d19996145b5091c966f869f8ec2436065633460c5bfac86f63fa9c3a01f4decc431635a64c1c1231bd146787c2721bbfdf15a9a7aa23de61645bd1e98a0682d7b683307bab8d6f3bdd24de0e126e769f4bc04c608fb4c4582b94b4ed265a0504df599a6a6247a753c42549effe198024f00db26dda174b85c35ee1388717fa097cbf292ee9fa9f249224232acea73c7f7f1bc1250962ea218fe3dc6f0ecbc96a05b884dffe6459ec70066ce80acc7f6e41daa94b4430e62587ba408634000a2c6a05c53370b92e4a9f5e46a45da77a00f2da7e3d002a5fab3b02913315f9598c848a06d9414ec3ed9f2344b821542feb93e32d6bb2a9c2d60cc064ccf3cf7be946662a006beb92c2e24d2d8ec20bce561a39c1e0680c7831d45e224173c98c90740cceda0ed85b8808a886716a092969a9d2efe648a03c583ed2818e11ba59e2f3eee1b1da0cec08ff3011a21e04eb01df871712c69593453f9ba775951414906ce1f621464a047d3cc74b405b9a2fa03b7eda6ae0cf0b2599c36ee94b55e919095ed6bba60c1a04b3d3c960a72ed8517d61f9bea47d1e581d15b84408fe18f3985a51a74498172a03f0fccba4bbf52915a0fedf60a113c10982f096b7bfe1145f229739478223460a09d292fb147c09f87e95f056cc6b94fec8ceab854ed6b84299871c300b9ae08b980").unwrap(),
            hex::decode("f90211a0252695736e59b8866457d51987af51eecad392aadc4e8441fd959bd300760d33a087ebfa5e9a72e94daba6c6c9cc6820e7bf8bd53f336db73bdfb8f33374e2f949a0bf4ac4058b6400261f070455768ee857d8b4c22ef008fe1a0fa0f13b91e6489ea066ef688bd6db926f9a4d1d4edabacc0c812daface6ab7779acf6e795f2ead32ba017afcdf4b76a00ca27c9975506a03362718c2763536621c625e3060222f959c6a0baa9eea6bc017324300ef5274119d0b11cb9edd7cdaca30da0ba42ec137b2c76a03f0225124e4335ede077209c415735d5878f5dffcbbbabfe373ca986c9b64dbfa09a9fd42416ea8c4ec6e6872a8fadbf8ad949874e72c68a3c55fd54fa21ff523ba0ec32b046988d1e5ea68b4bd77341a0982a0653b4db0ef2030eb37a4fd9036eaaa0f4b4e83b923c7e61628c7bfaaaac59d9780791166b8d6dd985d4bc9ced823541a09709ffd81aeb41b7fc3babe8c1da0efc7918dbdd0f6104bdb8d779e452c27482a02cb74297f79b3874a504deb521dc43c76aedfb63229426788b0f369e1c6b6b96a0f14a3344192015d7dfc6e503cad2296f6c8abe1bf5041853a3620d1e62761e1da0228a49ec0ca81862251eb06093553851c83e3ac6f2850f7b2342c8283573fa9ca0f17ba9305d87fdb3f6b2a5f117c426b089b339dde843fa0131da9d354bafd3d7a0d7d371f3d3d4bdbd2f96098fb82d8bd7106266b704e009ab5de7d13b1dfbf55780").unwrap(),
            hex::decode("f901f1a0aeb50e41e5419e976af5f4bf44f6f1c04a4e86fdd7fec2b634275d079276deeaa0c9c0921069518c1a41755f63032de5510299208e2773f7580fad02384a392f37a0a1e5ef204b0ed07ef50375ab79a71464eb57433424ef62ac915486becdd64ee4a0d69ba4c8b51dc9938b5bfc7ff2a49a443a3b87b198629d8513e18858c3773838a075159777c5cce79a06ce3842c1ebf235ccd2154edaeb666d915854d88425de4da00fc3af995144f11894b5ec22b3e73d2304bf0ce5dd97e80393ad0259bc955b8ea031cb495ff9ba66102d08a4582224613fccfeb7f143e4fb8782952da40883d5fca0c1c9612c8031ad016c90e7571917cecb31036aaa63456343d599afea57aa8a24a0cc18216ed8667e4b00d8b45284f530afd9725d028c8341f9ef9eb98b83ce3ddb80a0e8848985605b3888b6ddda0dcfbb28348f0b54413ebb527646708f4a2fccc5f5a08c2d772fc7a5cec8eba7b35d68ba1d37247607989a2e7b1dff4773292435e949a063979cdcb3e9b6cdc1862f22b17117b119c2389ce5d7dc6cf1226deca0ded73ea001fd041caea3f159f923729fd9996ae5d89cae2b8f848802cd73d60d39f4a30aa080d50a8106e7041643dfde33d48c3e6246f1f9d3938b91f5d44d6498e4ab56e5a0c2aa0e69dce7aed9360a02d8f5aba7c41e78bee976c63f1bf71f18a2a62fdd7380").unwrap(),
            hex::decode("f8b18080a054114914c94cc75bf5dcb15ddb0431ca33a4070a901c242a7f35ed06b3e3fe8480808080a0f08a5f5c54163c07dd8bd6d2723837f161fff16a97fdfed12a2dc55b9bd8823680a0f20163694274a056c430e042e603e6dd1b8efd9b04c01ba93bc4734c6f816aa9a0048fa1cac19427781074054cbafd1d91115f6472cb084bc12c4d5c47267b11138080a034222c93dbfbf699a57301778bf950f3cee3bbd40f423fe9baeefa536a4a681c808080").unwrap(),
            hex::decode("f871a0b9ebfbd5b07546530f7eb3b663cd48706bb6f4779af50a51e62f963f83f8dda280808080a08f1a8d46804e18b72bcadfacfc59e0a5e4c12aea351f805505f08d2a264b8cb280a058b4bdeb6da0355607102b6db76a7bf40b21bbac273911bbfa13f3320502b201808080808080808080").unwrap(),
            hex::decode("e39e20724734010729573fdf89712a74c5974a6ac5cc0c4f685bb84cd96f9c01838202af").unwrap(),
        ];

        assert_ok!(GovModule::verify_proof(Origin::signed(1), block_number, proof, key, value));

        // Check that the correct event is emitted
		let expected_event = mock::Event::pallet_gov(RawEvent::VerifyProof(true));
		assert_eq!(System::events()[1].event, expected_event,);

        println!("{}", GovModule::storage_root(block_number));
	});
}

// #[test]
// fn correct_error_for_none_value() {
// 	new_test_ext().execute_with(|| {
// 		// Ensure the expected error is thrown when no value is present.
// 		assert_noop!(GovModule::cause_error(Origin::signed(1)), Error::<Test>::NoneValue);
// 	});
// }